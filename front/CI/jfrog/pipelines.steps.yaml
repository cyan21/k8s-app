pipelines:
  - name: k8s_frontapp_npm
    configuration:
      environmentVariables:
        readOnly:
          myDemoVersion:  2.0.3
          myNpmRepo: avengers-npm
          myGenericRepo: avengers-generic
          myGenericPromoteRepo: avengers-rc-generic-local
    steps:
      - name: build_k8s_frontapp_npm
        type: NpmBuild
        configuration:
          npmArgs: '--no-progress --no-audit'
          affinityGroup: together
          repositoryName: ${myNpmRepo}
          sourceLocation: front/
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: src_code_k8s_frontapp_npm
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/app_dotnet/${run_number}/setup_env?branch=${res_src_code_k8s_frontapp_npm_branchName}"
            - cd ${res_src_code_k8s_frontapp_npm_resourcePath}/front/CI/jfrog
            - ls -l && chmod +x init.sh
            - ./init.sh -u  ${int_artifactory_eu_url/%artifactory/} -p ${int_artifactory_eu_apikey}            
            - restore_cache_files npm_cache ${res_src_code_k8s_frontapp_npm_resourcePath}/node_modules
          onSuccess:
            # - echo ${res_src_code_k8s_frontapp_npm_isGitTag}
            - appVersion=`if [[ ${res_src_code_k8s_frontapp_npm_isGitTag} == "True" ]]; then echo ${res_src_code_k8s_frontapp_npm_gitTagName}; else echo ${res_src_code_k8s_frontapp_npm_commitSha}; fi`
            # - echo $appVersion 
            - add_run_variables myAppVersion="${appVersion}"
            - add_run_variables myDockerTag="${myAppVersion}-${res_src_code_k8s_frontapp_npm_commitSha}"
            # - add_pipeline_variables subPath="${res_src_code_k8s_frontapp_npm_branchName}/${appVersion}"
            # cache node_modules folder for future runs
            - add_cache_files ${res_src_code_k8s_frontapp_npm_resourcePath}/front/node_modules npm_cache
            # pass front folder to next step
            - add_run_files  ${res_src_code_k8s_frontapp_npm_resourcePath}/front mySources            
            # pass JFrog CLI tmp folder to next step
            - add_run_files  /tmp/jfrog  jfrogCLI_tmp

      - name: package_and_publish_k8s_frontapp_npm
        type: Bash
        configuration:
          affinityGroup: together
          environmentVariables:
            OFFLINE_MODE: "true"
          inputSteps:
            - name: build_k8s_frontapp_npm
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_frontapp_npm
        execution:
          onStart:
            - restore_run_files mySources .
            - mkdir /tmp/jfrog 
            - restore_run_files jfrogCLI_tmp /tmp/jfrog/
            - ls -l /tmp/jfrog/
            - npm run build
          onExecute:
            - echo "Run Unit Testing ..." 
            - if [ $OFFLINE_MODE == "true" ]; then echo "Offline mode turned on";fi
          onSuccess:
            - ls -la
            - tar -czvf frontapp-${myDemoVersion}.tar.gz build/
            - jfrog rt u frontapp-${myDemoVersion}.tar.gz ${myGenericRepo}/ --build-name=k8s_frontapp_npm --build-number=${run_number}
            - jfrog rt bp k8s_frontapp_npm ${run_number}

      - name: scan_k8s_frontapp_npm
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_frontapp_npm
              trigger: true

      - name: promote_bi_k8s_frontapp_npm
        type: PromoteBuild
        configuration:
          targetRepository: ${myGenericPromoteRepo}
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputSteps:
            - name: scan_k8s_frontapp_npm
          inputResources:
            - name: bi_k8s_frontapp_npm
              trigger: true
          outputResources:
            - name: bi_k8s_frontapp_npm_promoted_staging
            - name: pb_k8s_frontapp_js            
        execution:  
          onStart:
            - echo ${res_bi_k8s_frontapp_npm_buildName} 
            - echo ${res_bi_k8s_frontapp_npm_buildNumber} 
            - echo ${myAppVersion}
          onSuccess:            
            - write_output pb_k8s_frontapp_js dockerAppTag=${myDockerTag}
            - write_output pb_k8s_frontapp_js biNumber=${res_bi_k8s_frontapp_npm_buildNumber}
            - write_output pb_k8s_frontapp_js appVersion=${myAppVersion}
            - which jfrog 
            - jfrog --version
            - curl -fL https://getcli.jfrog.io | sh
            - chmod u+x jfrog 
            - sudo mv jfrog $(which jfrog)
            - jfrog --version
            - jfrog rt sp --build=${res_bi_k8s_frontapp_npm_buildName}/${res_bi_k8s_frontapp_npm_buildNumber} -${myGenericPromoteRepo}/ "app.version=${myAppVersion};app.name=avengers"

  - name: k8s_frontapp_js_docker
    configuration:
      environmentVariables:
        readOnly:
          dockerPushRepo: avengers-docker
          dockerRepoUrl: avengers-docker.artifactory-eu-yannc4-0.soleng-emea-staging.jfrog.team:80
          myDockerImageName: ${dockerRepoUrl}/frontapp-js
          dockerPromoteRepo: avengers-rc-docker-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: together
          runtime:
            type: host
          inputResources:
            - name: pb_k8s_frontapp_js
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${dockerRepoUrl}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - add_run_variables myTag=${res_pb_k8s_frontapp_js_dockerAppTag}
            - add_run_variables biNumber=${res_pb_k8s_frontapp_js_biNumber}
      - name: build_k8s_frontapp_js_docker
        type: DockerBuild
        configuration:
          affinityGroup: together
          dockerFileName: Dockerfile
          dockerFileLocation: front/CI/Docker/
          dockerImageName: ${myDockerImageName}
          dockerImageTag: ${myTag}
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_dockerfile_k8s_frontapp_npm
            - name: frontapp_npm_exec
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - ls -la ${res_frontapp_npm_exec_resourcePath}
            - cp ${res_frontapp_npm_exec_resourcePath}/frontapp-2.0.3.tar.gz ${res_src_dockerfile_k8s_frontapp_npm_resourcePath}/front/CI/Docker/app.tar.gz
            - ls -la ${res_src_dockerfile_k8s_frontapp_npm_resourcePath}/front/CI/Docker/
      - name: publish_k8s_frontapp_js_docker
        type: DockerPush
        configuration:
          affinityGroup: together
          targetRepository: ${dockerPushRepo}
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_k8s_frontapp_js_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_frontapp_js_docker
        execution:
          onSuccess:
            - echo "Job well done!"

      - name: scan_k8s_frontapp_js_docker
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_frontapp_js_docker
              trigger: true

      - name: promote_bi_k8s_frontapp_js_docker
        type: PromoteBuild
        configuration:
          targetRepository: ${dockerPromoteRepo}
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_k8s_frontapp_js_docker
              trigger: true
          inputSteps:
            - name: scan_k8s_frontapp_js_docker
          outputResources:
            - name: bi_k8s_frontapp_js_docker_promoted_staging
            - name: pb_k8s_frontapp_docker
        execution:
          onSuccess:
            - jfrog rt sp --build=${res_bi_k8s_frontapp_js_docker_buildName}/${res_bi_k8s_frontapp_js_docker_buildNumber} ${dockerPromoteRepo}/**/manifest.json "docker.tag=${myDockerTag}"
            - write_output pb_k8s_frontapp_docker newTag=${myTag}

  - name: k8s_frontapp_js_deployment
    steps:
      - name: deploy_helm_chart
        type: HelmDeploy
        configuration:
          integrations:
            - name: yann_k8s
          inputResources:
            - name: hc_my_app
            - name: pb_k8s_frontapp_docker
          releaseName: helmreporesource
          flags: "--namespace ninjavengers --cleanup-on-fail images.front.tag: ${res_pb_k8s_frontapp_docker_newTag}"
          valueFilePaths:
            - values.yaml
        #execution:
          #onStart:
            #- kubectl version
            #- helm version