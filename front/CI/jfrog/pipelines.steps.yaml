pipelines:
  - name: k8s_frontapp_npm
    configuration:
      environmentVariables:
        readOnly:
          myDemoVersion:  2.0.3
          myNpmRepo: avengers-npm
          myNpmPromoteRepo: avengers-rc-npm-local
    steps:
      - name: build_k8s_frontapp_npm
        type: NpmBuild
        configuration:
          # runtime:
          #   type: image
          #   image:
          #     custom:
          #       name: docker.bintray.io/jfrog/pipelines-u18node
          #       tag: 10.16.3
          npmArgs: '--no-progress --no-audit'
          affinityGroup: together
          repositoryName: ${myNpmRepo}
          sourceLocation: front/
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: src_code_k8s_frontapp_npm
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/app_dotnet/${run_number}/setup_env?branch=${res_src_code_k8s_frontapp_npm_branchName}"
            - ls -l ${res_src_code_k8s_frontapp_npm_resourcePath}
            - restore_cache_files npm_cache ${res_src_code_k8s_frontapp_npm_resourcePath}/node_modules
          onSuccess:
            - echo ${res_src_code_k8s_frontapp_npm_isGitTag}
            - appVersion=`if [[ ${res_src_code_k8s_frontapp_npm_isGitTag} == "True" ]]; then echo ${res_src_code_k8s_frontapp_npm_gitTagName}; else echo ${res_src_code_k8s_frontapp_npm_commitSha}; fi`
            - echo $appVersion 
            - add_pipeline_variables appVersion="${appVersion}"
            - add_pipeline_variables subPath="${res_src_code_k8s_frontapp_npm_branchName}/${appVersion}"
            # cache node_modules folder for future runs
            - add_cache_files ${res_src_code_k8s_frontapp_npm_resourcePath}/front/node_modules npm_cache
            # pass front folder to next step
            - add_run_files  ${res_src_code_k8s_frontapp_npm_resourcePath}/front mySources

      - name: package_and_publish_k8s_frontapp_npm
        type: Bash
        configuration:
          affinityGroup: together
          environmentVariables:
            OFFLINE_MODE: "true"
          inputSteps:
            - name: build_k8s_frontapp_npm
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo "Run Unit Testing ..." 
            - if [ $OFFLINE_MODE == "true" ]; then echo "Offline mode turned on";fi
            - restore_run_files mySources .
            - ls -la 
            - cd front
            - ls -la
            - npm run build
          onComplete:
            - pwd 
            - ls -la

      # - name: publish_k8s_frontapp_npm
      #   type: NpmPublish
      #   configuration:
      #     affinityGroup: together
      #     environmentVariables:
      #       inputNpmBuildStepName: build_k8s_frontapp_npm
      #     repositoryName: ${myNpmRepo}
      #     inputSteps:
      #       - name: package_k8s_frontapp_npm
      #     integrations:
      #       - name: artifactory_eu 

      # - name: publish_bi_k8s_frontapp_npm
      #   type: PublishBuildInfo
      #   configuration:
      #     affinityGroup: together
      #     forceXrayScan: false
      #     inputSteps:
      #       - name: publish_k8s_frontapp_npm
      #     outputResources:
      #       - name: bi_k8s_frontapp_npm

      # - name: scan_k8s_frontapp_npm
      #   type: XrayScan
      #   configuration:
      #     failOnScan: false
      #     inputResources:
      #       - name: bi_k8s_frontapp_npm
      #         trigger: true

      # - name: promote_bi_k8s_frontapp_npm
      #   type: PromoteBuild
      #   configuration:
      #     targetRepository: ${myNpmPromoteRepo}
      #     includeDependencies: false
      #     status: SANDBOX_OK
      #     comment: Unit testing and Xray scan passed succesfully
      #     copy: true
      #     inputSteps:
      #       - name: scan_k8s_frontapp_npm
      #     inputResources:
      #       - name: bi_k8s_frontapp_npm
      #         trigger: true
      #     outputResources:
      #       - name: bi_k8s_frontapp_npm_promoted_staging
      #   execution:  
      #     onStart:
      #       - echo ${res_bi_k8s_frontapp_npm_buildName} 
      #       - echo ${res_bi_k8s_frontapp_npm_buildNumber} 
      #       - echo ${appVersion}
      #     onSuccess:
      #       - jfrog rt sp --build=${res_bi_k8s_frontapp_npm_buildName}/${res_bi_k8s_frontapp_npm_buildNumber} ${myNpmPromoteRepo}/ "app.version=${appVersion}"

            #            - write_output bi_k8s_frontapp_npm_promoted_staging myversion=${appVersion}


  # - name: suv_003_frontapp_docker_pipeline
  #   steps:
  #     - name: build_docker_frontapp
  #       type: DockerBuild
  #       configuration:
  #         affinityGroup: swampupgrp
  #         dockerFileName: jfrog-Dockerfile
  #         dockerFileLocation: front/CI/Docker/
  #         dockerImageName: '${ArtIP}/app-docker-virtual/frontapp'
  #         dockerImageTag: ${appVersion}-${res_src_dockerfile_frontapp_commitSha}
  #         inputResources:
  #           - name: src_dockerfile_frontapp
  #           - name: build_info_frontapp_promoted_staging
  #           - name: frontapp_exec
  #         integrations:
  #           - name: artifactory
  #           - name: app_docker_registry
  #       execution:
  #         onStart:
  #           - echo ${int_artifactory_url}
  #           - 'export ArtIP=$(echo ${int_artifactory_url}|awk -F ''/'' ''{print $3}'')'
  #           - echo ${ArtIP}
  #           - echo ${res_build_info_frontapp_promoted_staging_myversion}
  #           - add_pipeline_variables appVersion="${res_build_info_frontapp_promoted_staging_myversion}"
  #           - echo ${res_frontapp_exec_resourcePath}
  #           - echo "Npm App Build number :" 
  #           - echo ${triggerBuildInfoNumber}
  #           - echo "Npm App version :" 
  #           - echo ${appVersion} 
  #           - echo "Git repo hash :" 
  #           - echo ${res_src_dockerfile_frontapp_commitSha}
  #           - echo "Copying exec binary to specific location..." && ls -l
  #           - echo "Filespec location :" && echo ${res_frontapp_exec_resourcePath} && ls -l ${res_frontapp_exec_resourcePath}
  #           - cp ${res_frontapp_exec_resourcePath}/front* ${res_src_dockerfile_frontapp_resourcePath}/front/CI/Docker/
  #           - cd ${res_src_dockerfile_frontapp_resourcePath}/front/CI/Docker/
  #           - tar xvf front*.tgz
  #           - ls -l ${res_src_dockerfile_frontapp_resourcePath}/front/CI/Docker
  #           - sed -i "s/registry/${ArtIP}/g" jfrog-Dockerfile
  #           - echo $appVersion
  #           - add_pipeline_variables myDockerTag="${appVersion}-${res_src_dockerfile_frontapp_commitSha}"
  #         onSuccess:
  #           - echo "Job well done!"

  #     - name: publish_docker_frontapp
  #       type: DockerPush
  #       configuration:
  #         affinityGroup: swampupgrp
  #         targetRepository: app-docker-virtual
  #         autoPublishBuildInfo: true
  #         inputSteps:
  #           - name: build_docker_frontapp
  #         integrations:
  #           - name: artifactory
  #         outputResources:
  #           - name: build_info_docker_frontapp
  #       execution:
  #         onSuccess:
  #           - echo "Job well done!"
  #           - echo $appVersion
      
  #     - name: xray_scan_docker_build_info_frontapp
  #       type: Bash
  #       configuration:
  #         integrations:
  #           - name: artifactory
  #         affinityGroup: swampupgrp
  #         inputResources:
  #           - name: build_info_docker_frontapp
  #       execution:
  #         onStart:
  #           - echo ${res_build_info_docker_frontapp_buildName}
  #           - echo ${res_build_info_docker_frontapp_buildNumber}
  #           - jfrog rt bs ${res_build_info_docker_frontapp_buildName} ${res_build_info_docker_frontapp_buildNumber} --fail=false

  #     - name: promote_docker_build_info_frontapp
  #       type: PromoteBuild
  #       configuration:
  #         affinityGroup: swampupgrp
  #         targetRepository: app-docker-rc-local
  #         includeDependencies: false
  #         status: "DOCKER_SCAN_OK"
  #         comment: "Xray scan passed succesfully"
  #         copy: true
  #         integrations:
  #           - name: artifactory
  #         inputSteps:
  #           - name: xray_scan_docker_build_info_frontapp
  #         inputResources:
  #           - name: build_info_docker_frontapp
  #             trigger: true
  #         outputResources:
  #           - name: build_info_docker_frontapp_promoted_staging
  #       execution:
  #         onStart:
  #           - 'export ArtIP=$(echo ${int_artifactory_url}|awk -F ''/'' ''{print $3}'')'
  #           - echo ${res_build_info_docker_frontapp_buildName}
  #           - echo ${res_build_info_docker_frontapp_buildNumber}
  #           - jfrog rt cp --build=${res_build_info_docker_frontapp_buildName}/${res_build_info_docker_frontapp_buildNumber} app-docker-dev-local/ app-docker-rc-local/
  #         onSuccess:
  #           - jfrog rt sp --build=${res_build_info_docker_frontapp_buildName}/${res_build_info_docker_frontapp_buildNumber} app-docker-rc-local/**/manifest.json "docker.tag=${myDockerTag}"
  #           - write_output build_info_docker_frontapp_promoted_staging "frontregistry=\"${ArtIP}/app-docker-virtual\""
  #           - write_output build_info_docker_frontapp_promoted_staging "frontimage=\"frontapp\""
  #           - write_output build_info_docker_frontapp_promoted_staging "fronttag=${myDockerTag}"