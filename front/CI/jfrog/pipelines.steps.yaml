pipelines:
  - name: frontapp_npm_pipeline
    configuration:
      environmentVariables:
        readOnly:
          art_url: "http://artifactory-eu.soleng-emea-staging.jfrog.team/artifactory"
    steps:
      - name: build_npm_frontend
        type: NpmBuild
        configuration:
          repositoryName: npm
          sourceLocation: front/
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: src_code_frontapp
        execution:
          onSuccess:
            - echo ${res_src_code_frontapp_isGitTag}
            - appVersion=`if [[ ${res_src_code_frontapp_isGitTag} == "True" ]]; then echo ${res_src_code_frontapp_gitTagName}; else echo ${res_src_code_frontapp_commitSha}; fi`
            - echo $appVersion 
            - add_pipeline_variables appVersion="${appVersion}"
            - add_pipeline_variables subPath="${res_src_code_frontapp_branchName}/${appVersion}"      

      - name: npm_package_frontend
        type: Bash
        configuration:
          environmentVariables:
            OFFLINE_MODE: "true"
          inputSteps:
            - name: build_npm_frontend
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo "Run Unit Testing ..." 
            - if [ $OFFLINE_MODE == "true" ]; then echo "Offline mode turned on";fi
            - ls -la
            - restore_run_files $build_npm_frontend_sourceStateName .
            - cd front
            - ls -la
            - npm run build
          onComplete:
            - ls -la
            - cd ..
            - add_run_files . $build_npm_frontend_sourceStateName    
            - ls -la

      - name: publish_frontend
        type: NpmPublish
        configuration:
          environmentVariables:
            inputNpmBuildStepName: build_npm_frontend
          repositoryName: npm
          inputSteps:
            - name: npm_package_frontend
          integrations:
            - name: artifactory_eu 

      - name: publish_frontend_buildinfo
        type: PublishBuildInfo
        configuration:
          forceXrayScan: false
          inputSteps:
            - name: publish_frontend
          outputResources:
            - name: FrontAppBuildInfo

      - name: scan_npm_frontapp
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: FrontAppBuildInfo
              trigger: true
          outputResources:
            - name: FrontAppBuildInfo_scanned

      - name: promote_build_info_npm_frontapp
        type: PromoteBuild
        configuration:
          targetRepository: app-npm-rc-local
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputResources:
            - name: FrontAppBuildInfo_scanned
              trigger: true
          outputResources:
            - name: build_info_frontapp_promoted
        execution:  
          onStart:
            - echo ${res_FrontAppBuildInfo_scanned_buildName} 
            - echo ${res_FrontAppBuildInfo_scanned_buildNumber} 
          onSuccess:
            - jfrog rt sp --build=${res_FrontAppBuildInfo_scanned_buildName}/${res_FrontAppBuildInfo_scanned_buildNumber} app-npm-rc-local/ "app.version=${appVersion}"

  - name: frontapp_docker_pipeline
    steps:
      - name: export_var
        type: Bash
        configuration:
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: build_info_frontapp_promoted
          outputResources:
            - name: frontapp_exec
        execution:
          onSuccess:
          - echo $triggerBuildInfoName
          - echo $triggerBuildInfoNumber
          - add_pipeline_variables triggerBuildInfoName="${res_build_info_frontapp_promoted_buildName}"
          - add_pipeline_variables triggerBuildInfoNumber="${res_build_info_frontapp_promoted_buildNumber}"
          - echo $triggerBuildInfoName
          - echo $triggerBuildInfoNumber
          - echo "items.find({\"@build.name\":\"${triggerBuildInfoName}\",\"@build.number\":\"${triggerBuildInfoNumber}\"}).include(\"@app.version\")" > aql.json
          - cat aql.json
          - jfrog rt curl -XPOST api/search/aql -T aql.json
          - appVersion=`jfrog rt curl -XPOST api/search/aql -T aql.json | jq --raw-output .results[].properties[].value`
          - echo $appVersion
          - add_pipeline_variables appVersion="${appVersion}" 
          - echo ${appVersion}
          - echo $triggerBuildInfoName
          - echo ${triggerBuildInfoNumber}
      
      - name: build_docker_frontapp
        type: DockerBuild
        configuration:
          dockerFileName: jfrog-Dockerfile
          dockerFileLocation: front/CI/Docker/
          dockerImageName: 'yannaws-app-docker.jfrog.io/frontapp'
          dockerImageTag: ${appVersion}-${res_src_dockerfile_frontapp_commitSha}
          inputResources:
            - name: src_dockerfile_frontapp
            - name: frontapp_exec
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo ${res_frontapp_exec_resourcePath}
            - echo "Npm App Build number :" 
            - echo ${triggerBuildInfoNumber}
            - echo "Npm App version :" 
            - echo ${appVersion} 
            - echo "Git repo hash :" 
            - echo ${res_src_dockerfile_frontapp_commitSha}
            - echo "Copying exec binary to specific location..." && ls -l
            - echo "Filespec location :" && echo ${res_frontapp_exec_resourcePath} && ls -l ${res_frontapp_exec_resourcePath}
            - cp ${res_frontapp_exec_resourcePath}/front* ${res_src_dockerfile_frontapp_resourcePath}/front/CI/Docker/
            - cd ${res_src_dockerfile_frontapp_resourcePath}/front/CI/Docker/
            - tar xvf front*.tgz
            - ls -l ${res_src_dockerfile_frontapp_resourcePath}/front/CI/Docker
            - echo $appVersion
            - add_pipeline_variables myDockerTag="${appVersion}-${res_src_dockerfile_frontapp_commitSha}"
          onSuccess:
            - echo "Job well done!"

      - name: publish_docker_frontapp
        type: DockerPush
        configuration:
          targetRepository: app-docker
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_docker_frontapp
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: build_info_docker_frontapp
        execution:
          onSuccess:
            - echo "Job well done!"
            - echo $appVersion

      - name: scan_docker_build_info_frontapp
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: build_info_docker_frontapp
              trigger: true
          outputResources:
            - name: build_info_docker_frontapp_scanned

      - name: promote_docker_build_info_frontapp
        type: PromoteBuild
        configuration:
          targetRepository: app-docker-sit-local
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: build_info_docker_frontapp_scanned
              trigger: true
          outputResources:
            - name: build_info_docker_frontapp_promoted
        execution:
          onStart:
            - echo ${res_build_info_docker_frontapp_scanned_buildName}
            - echo ${build_info_docker_frontapp_scanned_buildNumber}
            - jfrog rt cp --build=${res_build_info_docker_frontapp_scanned_buildName}/${build_info_docker_frontapp_scanned_buildNumber} app-docker-dev-local/ app-docker-rc-local/
          onSuccess:
            - jfrog rt sp --build=${res_build_info_docker_frontapp_scanned_buildName}/${build_info_docker_frontapp_scanned_buildNumber} app-docker-sit-local/**/manifest.json "docker.tag=${myDockerTag}"