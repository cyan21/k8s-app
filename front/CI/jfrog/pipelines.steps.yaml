pipelines:
  - name: k8s_frontapp_npm
    configuration:
      environmentVariables:
        readOnly:
          myDemoVersion:  2.0.3
          myNpmRepo: avengers-npm
          myGenericRepo: avengers-generic
          myGenericPromoteRepo: avengers-rc-generic-local
    steps:
      - name: build_k8s_frontapp_npm
        type: NpmBuild
        configuration:
          npmArgs: '--no-progress --no-audit'
          affinityGroup: together
          repositoryName: ${myNpmRepo}
          sourceLocation: front/
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: src_code_k8s_frontapp_npm
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/app_dotnet/${run_number}/setup_env?branch=${res_src_code_k8s_frontapp_npm_branchName}"
            - restore_cache_files npm_cache ${res_src_code_k8s_frontapp_npm_resourcePath}/node_modules
          onSuccess:
            # - echo ${res_src_code_k8s_frontapp_npm_isGitTag}
            - appVersion=`if [[ ${res_src_code_k8s_frontapp_npm_isGitTag} == "True" ]]; then echo ${res_src_code_k8s_frontapp_npm_gitTagName}; else echo ${res_src_code_k8s_frontapp_npm_commitSha}; fi`
            # - echo $appVersion 
            - add_run_variables myAppVersion="${appVersion}"
            - add_run_variables myDockerTag="${myAppVersion}-${res_src_code_k8s_frontapp_npm_commitSha}"
# - add_pipeline_variables subPath="${res_src_code_k8s_frontapp_npm_branchName}/${appVersion}"
            # cache node_modules folder for future runs
            - add_cache_files ${res_src_code_k8s_frontapp_npm_resourcePath}/front/node_modules npm_cache
            # pass front folder to next step
            - add_run_files  ${res_src_code_k8s_frontapp_npm_resourcePath}/front mySources            
            # pass JFrog CLI tmp folder to next step
            - add_run_files  /tmp/jfrog  jfrogCLI_tmp

      - name: package_and_publish_k8s_frontapp_npm
        type: Bash
        configuration:
          affinityGroup: together
          environmentVariables:
            OFFLINE_MODE: "true"
          inputSteps:
            - name: build_k8s_frontapp_npm
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_frontapp_npm
        execution:
          onStart:
            - restore_run_files mySources .
            - mkdir /tmp/jfrog 
            - restore_run_files jfrogCLI_tmp /tmp/jfrog/
            - ls -l /tmp/jfrog/
            - npm run build
          onExecute:
            - echo "Run Unit Testing ..." 
            - if [ $OFFLINE_MODE == "true" ]; then echo "Offline mode turned on";fi
          onSuccess:
            - ls -la
            - tar -czvf frontapp-${myDemoVersion}.tar.gz build/
            - jfrog rt u frontapp-${myDemoVersion}.tar.gz ${myGenericRepo}/ --build-name=k8s_frontapp_npm --build-number=${run_number}
            - jfrog rt bp k8s_frontapp_npm ${run_number}

      - name: scan_k8s_frontapp_npm
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_frontapp_npm
              trigger: true

      - name: promote_bi_k8s_frontapp_npm
        type: PromoteBuild
        configuration:
          targetRepository: ${myGenericPromoteRepo}
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: true
          inputSteps:
            - name: scan_k8s_frontapp_npm
          inputResources:
            - name: bi_k8s_frontapp_npm
              trigger: true
          outputResources:
            - name: bi_k8s_frontapp_npm_promoted_staging
            - name: pb_frontapp_js            
        execution:  
          onStart:
            - echo ${res_bi_k8s_frontapp_npm_buildName} 
            - echo ${res_bi_k8s_frontapp_npm_buildNumber} 
            - echo ${myAppVersion}
          onSuccess:            
            - write_output pb_frontapp_js dockerAppTag=${myDockerTag}
            - write_output pb_frontapp_js biNumber=${res_bi_k8s_frontapp_npm_buildNumber}
            - write_output pb_frontapp_js appVersion=${myAppVersion}
            - which jfrog 
            - jfrog --version
            - curl -fL https://getcli.jfrog.io | sh
            - chmod u+x jfrog 
            - sudo mv jfrog $(which jfrog)
            - jfrog --version
            - jfrog rt sp --build=${res_bi_k8s_frontapp_npm_buildName}/${res_bi_k8s_frontapp_npm_buildNumber} -${myGenericPromoteRepo}/ "app.version=${myAppVersion};app.name=avengers"


  - name: k8s_frontapp_js_docker
    configuration:
    environmentVariables:
      readOnly:
        dockerPushRepo: avengers-docker
        dockerRepoUrl: avengers-docker.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
        myDockerImageName: ${dockerRepoUrl}/frontapp-js
        dockerPromoteRepo: avengers-rc-docker-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: together
          runtime:
            type: host
          inputResources:
            - name: pb_frontapp_js
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${dockerRepoUrl}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - add_run_variables myTag=${res_pb_frontapp_js_dockerAppTag}
            - add_run_variables biNumber=${res_pb_frontapp_js_biNumber}
      - name: build_k8s_frontapp_js_docker
        type: DockerBuild
        configuration:
          affinityGroup: together
          dockerFileName: Dockerfile
          dockerFileLocation: front/CI/Docker/
          dockerImageName: ${myDockerImageName}
          dockerImageTag: ${myTag}
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_dockerfile_frontapp
            - name: frontapp_exec
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo "TO DO : get tarball via FileSpec to install into Docker container"

      - name: publish_k8s_frontapp_js_docker
        type: DockerPush
        configuration:
          affinityGroup: together
          targetRepository: ${dockerPushRepo}
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_k8s_frontapp_js_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_frontapp_js_docker
        execution:
          onSuccess:
            - echo "Job well done!"

      
  #     - name: xray_scan_docker_build_info_frontapp
  #       type: Bash
  #       configuration:
  #         integrations:
  #           - name: artifactory
  #         affinityGroup: swampupgrp
  #         inputResources:
  #           - name: build_info_docker_frontapp
  #       execution:
  #         onStart:
  #           - echo ${res_build_info_docker_frontapp_buildName}
  #           - echo ${res_build_info_docker_frontapp_buildNumber}
  #           - jfrog rt bs ${res_build_info_docker_frontapp_buildName} ${res_build_info_docker_frontapp_buildNumber} --fail=false

  #     - name: promote_docker_build_info_frontapp
  #       type: PromoteBuild
  #       configuration:
  #         affinityGroup: swampupgrp
  #         targetRepository: app-docker-rc-local
  #         includeDependencies: false
  #         status: "DOCKER_SCAN_OK"
  #         comment: "Xray scan passed succesfully"
  #         copy: true
  #         integrations:
  #           - name: artifactory
  #         inputSteps:
  #           - name: xray_scan_docker_build_info_frontapp
  #         inputResources:
  #           - name: build_info_docker_frontapp
  #             trigger: true
  #         outputResources:
  #           - name: build_info_docker_frontapp_promoted_staging
  #       execution:
  #         onStart:
  #           - 'export ArtIP=$(echo ${int_artifactory_url}|awk -F ''/'' ''{print $3}'')'
  #           - echo ${res_build_info_docker_frontapp_buildName}
  #           - echo ${res_build_info_docker_frontapp_buildNumber}
  #           - jfrog rt cp --build=${res_build_info_docker_frontapp_buildName}/${res_build_info_docker_frontapp_buildNumber} app-docker-dev-local/ app-docker-rc-local/
  #         onSuccess:
  #           - jfrog rt sp --build=${res_build_info_docker_frontapp_buildName}/${res_build_info_docker_frontapp_buildNumber} app-docker-rc-local/**/manifest.json "docker.tag=${myDockerTag}"
  #           - write_output build_info_docker_frontapp_promoted_staging "frontregistry=\"${ArtIP}/app-docker-virtual\""
  #           - write_output build_info_docker_frontapp_promoted_staging "frontimage=\"frontapp\""
  #           - write_output build_info_docker_frontapp_promoted_staging "fronttag=${myDockerTag}"