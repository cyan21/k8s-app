pipeline {
    agent {
        kubernetes {
            yaml """\
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                some-label: some-label-value
            spec:
              containers:
              - name: npm
                image: node:current-alpine3.13
                command:
                - cat
                tty: true
              - name: docker
                image: docker:20.10.6-dind
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
            """.stripIndent()
        }
    }

    environment {
        // for docker build
        ARTY_CREDS=credentials('jenkins_rt')
        
        // for RT plugin : should match the ID just above
        ARTY_CREDS_ID='jenkins_rt'
        
        ART_ID='artifactory-eu'
        MY_BUILD_NAME = 'jenkins-js'
        DOCKER_BUILD_NAME = 'jenkins-js-docker'
        DOCKER_REGISTRY_URL=sh(returnStdout: true, script: """ if [ \"${params.DOCKER_SUB_DOMAIN}\" = \"true\" ]; then echo \"${params.DOCKER_REPO}.${params.JPD_URL}\"; else echo \"${params.JPD_URL}/${params.DOCKER_REPO}\"; fi""").trim()
        NODE_OPTIONS='--openssl-legacy-provider'

    }

    parameters {
        string(name: 'MY_GIT_URL', defaultValue: 'https://github.com/cyan21/k8s-app', description: 'DO NOT ADD .git at the end')
        string(name: 'MY_GIT_BRANCH', defaultValue: 'demo', description: '')
        string(name: 'SRC_PATH', defaultValue: 'front', description: '')

        string(name: 'JPD_URL', defaultValue: 'yann-demo.dev.gcp.devopsacc.team', description: 'DO NOT ADD PROTOCOL')
        string(name: 'JF_PROJECT', defaultValue: 'npt', description: 'JFrog Project key')
      
        string(name: 'NPM_REPO', defaultValue: 'npt-npm', description: '')
        string(name: 'GENERIC_REPO', defaultValue: 'npt-generic-release-local', description: '')
        string(name: 'GENERIC_PROMOTE', defaultValue: 'npt-generic-release-local', description: '')

        string(name: 'DOCKER_REPO', defaultValue: 'npt-docker', description: '')
        string(name: 'DOCKER_PROMOTE', defaultValue: 'npt-docker-release-local', description: 'HAS TO BE A LOCAL REPO')
        booleanParam(name: 'DOCKER_SUB_DOMAIN', defaultValue: false, description: 'false means Docker Repo Path')

        string(name: 'APP_NAME', defaultValue: 'monkey', description: 'will be added as metadata on built artifacts as app.name')
        string(name: 'NEW_VERSION', defaultValue: '1.4.1', description: 'will be added as metadata on built artifacts as app.name')

        booleanParam(name: 'NPM_BUILD', defaultValue: false, description: '')
        booleanParam(name: 'DOCKER_BUILD', defaultValue: false, description: '')

        booleanParam(name: 'FAIL_BUILD', defaultValue: false, description: 'based on Xray scanning result')
        booleanParam(name: 'INDEX_BUILD', defaultValue: false, description: 'Should be used ONLY for the 1st run for XRAY to index a build ')

        string(name: 'ADM_USER', defaultValue: '', description: 'Only used if INDEX_BUILD is ticked')
        string(name: 'ADM_PASS', defaultValue: '', description: 'Only used if INDEX_BUILD is ticked')

        booleanParam(name: 'JPIPE_TRIGGER', defaultValue: false, description: '')
        string(name: 'JPIPE_URL', defaultValue: '', description: '')
        string(name: 'JPIPE_PASS', defaultValue: '***', description: '')

        string(name: 'MY_BUILD_NUMBER', defaultValue: '0', description: 'Only used if JPIPE_TRIGGER is ticked. If set to 0 will take the current run ID')
    }
    
    stages {

        stage ('NPM Build') {
            when {
                expression {
                    params.NPM_BUILD
                }
            }
            steps {
                container('npm') {
                    
                    // BUG : https://issues.jenkins.io/browse/JENKINS-30600 
                    //git branch: params.MY_GIT_BRANCH , url: params.MY_GIT_URL
                    
                    sh """#!/bin/sh
                        apk add git curl openjdk11 jq
                        git clone ${params.MY_GIT_URL} -b ${params.MY_GIT_BRANCH}
                    """

                    dir (params.SRC_PATH ) {

                        rtServer (
                            id: env.ART_ID,
                            url: "https://${params.JPD_URL}/artifactory",
                            username: "${ARTY_CREDS_USR}",
                            password: "${ARTY_CREDS_PSW}",
                        )
                            //credentialsId: env.ARTY_CREDS_ID
        
                        sh """#!/bin/sh
                            rm -rf package-lock.json
                            ls -l
                            npm config ls 
                        """

                        rtNpmResolver (
                            id: "NPM_RESOLVER",
                            serverId: env.ART_ID,
                            repo: params.NPM_REPO
                        )
                        
                        rtBuildInfo (
                            captureEnv: true,
                            excludeEnvPatterns: ['*MY_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER,
                            project: params.JF_PROJECT
                        )
    
                        // audit dependencies
                        sh """
                            curl -fL https://getcli.jfrog.io/v2-jf | sh
                            ./jf --version
                            JFROG_CLI_LEVEL=ERROR CI=true ./jf c add  \
                                --url=https://${params.JPD_URL} \
                                --user=${ARTY_CREDS_USR}  \
                                --password="${ARTY_CREDS_PSW}" \
                            yann-rt
                            ./jf npmc \
				--server-id-resolve=yann-rt \
				--repo-resolve-releases=${params.NPM_REPO} \
                            ./jf audit-npm
                        """
                        rtNpmInstall (
                            args: '--no-audit --progress=false',
                            module: 'webapp',
                            resolverId: 'NPM_RESOLVER',
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER,
                            project: params.JF_PROJECT
                        )

                        sh """
                            env
                            npm run build
                            tar -czvf js-webapp-${params.NEW_VERSION}.tar.gz build/
                            ls -l 
                        """
                        
                        rtUpload (
                            serverId: env.ART_ID,
                            spec: """{
                                  \"files\": [
                                    {
                                      \"pattern\": \"js-webapp-${params.NEW_VERSION}.tar.gz\",
                                      \"target\": \"${params.GENERIC_REPO}\",
                                      \"flat\": \"true\"
                                      
                                    }
                                  ]
                            }""",
                            module: 'webapp',
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER,
                            project: params.JF_PROJECT
                        )

                        rtSetProps (
                            serverId: env.ART_ID,
                            spec: """{
                                    \"files\": [
                                    {
                                        \"aql\": {
                                            \"items.find\": {
                                                \"repo\":\"${params.GENERIC_REPO}\",
                                                \"@build.name\": \"${env.MY_BUILD_NAME}\",
                                                \"@build.number\": \"${env.BUILD_NUMBER}\"
                                            }
                                        }                          
                                    }
                                    ]
                            }""",
                            props: "app.name=${params.APP_NAME};app.version=${params.NEW_VERSION}"
                        )

                        rtPublishBuildInfo (
                            serverId: env.ART_ID,
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER,
                            project: params.JF_PROJECT
                        )

                    } // end dir
                    
                } // end container
            } // end step
        }   // end stage
        
        stage ('Docker Build & Push') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                container('docker') {
                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: env.ARTY_CREDS_ID
                    )

                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*MY_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER,
                        project: params.JF_PROJECT
                    )
                    
                    rtDownload (
                        serverId: env.ART_ID,
                        spec: """{
                              "files": [
                                {
                                  \"pattern": \"${params.GENERIC_REPO}/js-webapp-${params.NEW_VERSION}.tar.gz\",
                                  \"target": \"app.tar.gz\",
                                  \"flat\": \"true\"
                                  
                                }
                              ]
                        }""",
                        failNoOp: true,
                        module: 'webapp',
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER,
                        project: params.JF_PROJECT
                    )
                    
                    sh """
                        ls -l
                        apk add curl openjdk11
                        git_path=`echo ${params.MY_GIT_URL} | cut -d/ -f4,5`
                        echo \${git_path}
                        echo https://raw.githubusercontent.com/\${git_path}/${params.MY_GIT_BRANCH}/${params.SRC_PATH}/CI/Docker/Dockerfile
                        curl -O https://raw.githubusercontent.com/\${git_path}/${params.MY_GIT_BRANCH}/${params.SRC_PATH}/CI/Docker/Dockerfile
                        cat Dockerfile

                        docker login -u ${ARTY_CREDS_USR} -p ${ARTY_CREDS_PSW} ${env.DOCKER_REGISTRY_URL}
                        ls -l 
                        docker build -t ${env.DOCKER_REGISTRY_URL}/jenkins-js-webapp:${params.NEW_VERSION} .

                    """
                
                    rtDockerPush(
                        serverId: env.ART_ID,
                        image: "${env.DOCKER_REGISTRY_URL}/jenkins-js-webapp:${params.NEW_VERSION}",
                        targetRepo: env.DOCKER_REPO,
                        properties: "app.name=${params.APP_NAME};app.version=${params.NEW_VERSION}",
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER,
                        project: params.JF_PROJECT
                    )
 
                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER,
                        project: params.JF_PROJECT
                    )
                }
            } // end steps
        } // end stage

        stage ('Build promotion for Docker Build') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                rtPromote (
                    // Mandatory parameter
                    serverId: env.ART_ID,
                    buildName: env.DOCKER_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    project: params.JF_PROJECT,
                    targetRepo: params.DOCKER_PROMOTE,
                    comment: 'Xray scan passed',
                    status: 'VULN_SCAN_OK',
                    includeDependencies: false,
                    copy: false,
                    failFast: false
                )               
            }
        }

        stage ('Trigger JFrog Pipelines') {
            when {
                expression {
                    params.JPIPE_TRIGGER
                }
            }        
            steps {
                
                sh """#!/bin/sh
                    bNumber=${params.MY_BUILD_NUMBER} 
                    if [ \$bNumber = "0" ]; then bNumber=${env.BUILD_NUMBER}; fi
                    echo \$bNumber

                    curl \
                        -XPOST \
                        -H "authorization: ${params.JPIPE_PASS}" \
                        -H "Content-Type: application/json" \
                        -d '{"DockerBuildName": "'${env.DOCKER_BUILD_NAME}'", "buildNumber": "'\${bNumber}'", "appName": "'${params.APP_NAME}'", "appVersion":"'${params.NEW_VERSION}'"}' \
                    "${params.JPIPE_URL}"
                """
            }
        }  
    } // end stages
}
