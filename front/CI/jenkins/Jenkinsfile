pipeline {
    agent {
        kubernetes {
            yaml """\
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                some-label: some-label-value
            spec:
              containers:
              - name: npm
                image: node:current-alpine3.13
                command:
                - cat
                tty: true
              - name: docker
                image: docker:20.10.6-dind
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
            """.stripIndent()
        }
    }

    environment {
        // for docker build
        ARTY_CREDS=credentials('jenkins_rt')
        
        // for RT plugin : should match the ID just above
        ARTY_CREDS_ID='jenkins_rt'
        
        ART_ID='artifactory-eu'
        MY_BUILD_NAME = 'jenkins-js'
        DOCKER_BUILD_NAME = 'jenkins-js-docker'
    }

    parameters {
        string(name: 'MY_GIT_URL', defaultValue: 'https://github.com/cyan21/k8s-app', description: 'DO NOT ADD .git at the end')
        string(name: 'MY_GIT_BRANCH', defaultValue: 'soleng-stg', description: '')
        string(name: 'SRC_PATH', defaultValue: 'front', description: '')

        string(name: 'JPD_URL', defaultValue: 'yann-swampup.dev.aws.devopsacc.team', description: 'DO NOT ADD PROTOCOL')

        string(name: 'NPM_REPO', defaultValue: 'urs-npm', description: '')
        string(name: 'GENERIC_REPO', defaultValue: 'urs-generic', description: '')
        string(name: 'GENERIC_PROMOTE', defaultValue: 'urs-generic-release-local', description: '')

        string(name: 'DOCKER_REPO', defaultValue: 'urs-docker', description: '')
        string(name: 'DOCKER_PROMOTE', defaultValue: 'urs-docker-release-local', description: 'HAS TO BE A LOCAL REPO')

        string(name: 'NEW_VERSION', defaultValue: '1.4.1', description: '')

        booleanParam(name: 'NPM_BUILD', defaultValue: false, description: '')
        booleanParam(name: 'DOCKER_BUILD', defaultValue: false, description: '')
    }
    
    stages {

        stage ('NPM Build') {
            when {
                expression {
                    params.NPM_BUILD
                }
            }
            steps {
                container('npm') {
                     
                    git branch: params.MY_GIT_BRANCH , url: params.MY_GIT_URL
                    
                    dir (params.SRC_PATH ) {

                        sh """#!/bin/sh
                            apk add curl openjdk11 jq
                            rm -rf package-lock.json
                            ls -l
                        """
                        
                        rtServer (
                            id: env.ART_ID,
                            url: "https://${params.JPD_URL}/artifactory",
                            credentialsId: env.ARTY_CREDS_ID
                        )
        
                        rtNpmResolver (
                            id: "NPM_RESOLVER",
                            serverId: env.ART_ID,
                            repo: params.NPM_REPO
                        )
                        
                        rtBuildInfo (
                            captureEnv: true,
                            excludeEnvPatterns: ['*MY_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )
    
                        rtNpmInstall (
                            args: '--verbose',
                            module: 'dependencies',
                            resolverId: 'NPM_RESOLVER',
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )

                        sh """
                            npm run build
                            tar -czvf js-webapp-${params.NEW_VERSION}.tar.gz build/
                            ls -l 
                        """
                        
                        rtUpload (
                            serverId: env.ART_ID,
                            spec: """{
                                  \"files\": [
                                    {
                                      \"pattern\": \"js-webapp-${params.NEW_VERSION}.tar.gz\",
                                      \"target\": \"${params.GENERIC_REPO}\",
                                      \"flat\": \"true\"
                                      
                                    }
                                  ]
                            }""",
                            module: 'webapp',
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )


                        rtPublishBuildInfo (
                            serverId: env.ART_ID,
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )
                    } // end dir
                    
                } // end container
            } // end step
        }   // end stage
        
        stage ('Xray scan') {
            when {
                expression {
                    params.NPM_BUILD
                }
            }
            steps {
                xrayScan (
                    serverId: env.ART_ID,
                    buildName: env.MY_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    failBuild: false
                )   
            }
        }
        

        stage ('Build promotion') {
            when {
                expression {
                    params.NPM_BUILD
                }
            }
            steps {
                rtPromote (
                    serverId: env.ART_ID,
                    buildName: env.MY_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,

                    targetRepo: params.GENERIC_PROMOTE,
                    comment: 'Xray scan passed',
                    status: 'VULN_SCAN_OK',
                    includeDependencies: false,
                    copy: false
                )               
            }
        }

        stage ('Docker Build & Push') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                container('docker') {
                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: env.ARTY_CREDS_ID
                    )

                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*MY_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    rtDownload (
                        serverId: env.ART_ID,
                        spec: """{
                              "files": [
                                {
                                  \"pattern": \"${params.GENERIC_REPO}/js-webapp-${params.NEW_VERSION}.tar.gz\",
                                  \"target": \"app.tar.gz\",
                                  \"flat\": \"true\"
                                  
                                }
                              ]
                        }""",
                        failNoOp: true,
                        module: 'webapp',
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    sh """#!/bin/sh
                        ls -l
                        apk add curl openjdk11
                        git_path=`echo ${params.MY_GIT_URL} | cut -d/ -f4,5`
                        echo \${git_path}
                        echo https://raw.githubusercontent.com/\${git_path}/${params.MY_GIT_BRANCH}/${params.SRC_PATH}/CI/Docker/Dockerfile
                        curl -O https://raw.githubusercontent.com/\${git_path}/${params.MY_GIT_BRANCH}/${params.SRC_PATH}/CI/Docker/Dockerfile
                        cat Dockerfile
                        docker login -u ${ARTY_CREDS_USR} -p ${ARTY_CREDS_PSW} ${params.JPD_URL}
                        ls -l 
                        docker build -t ${params.JPD_URL}/${params.DOCKER_REPO}/jenkins-js-webapp:${params.NEW_VERSION} .
                    """
                
                    rtDockerPush(
                        serverId: env.ART_ID,
                        image: "${params.JPD_URL}/${params.DOCKER_REPO}/jenkins-js-webapp:${params.NEW_VERSION}",
                        targetRepo: env.DOCKER_REPO,
                        properties: 'project-name=uranus;status=stable',
                        // If the build name and build number are not set here, the current job name and number will be used:
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
 
                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                }
            } // end steps
        } // end stage

        stage ('Xray scan for Docker Build') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                xrayScan (
                    serverId: env.ART_ID,
                    buildName: env.DOCKER_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    failBuild: false
                )   
            }
        }
        

        stage ('Build promotion for Docker Build') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                rtPromote (
                    // Mandatory parameter
                    serverId: env.ART_ID,
                    buildName: env.DOCKER_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,

                    targetRepo: params.DOCKER_PROMOTE,
                    comment: 'Xray scan passed',
                    status: 'VULN_SCAN_OK',
                    includeDependencies: false,
                    copy: false
                )               
            }
        }

    } // end stages
}
