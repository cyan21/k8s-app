template: true
valuesFilePath: values.yml  

resources:
  - name: {{ .Values.InitResources.gitRepo.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.InitResources.gitRepo.gitProvider }}
      path: {{ .Values.InitResources.gitRepo.path }}
      branches:
        include: {{ .Values.InitResources.gitRepo.branches.include }}
      files: 
        include: {{ .Values.InitResources.gitRepo.files.include }}
      buildOn:
         commit: false

  - name: {{ .Values.InitResources.gitRepoDocker.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.InitResources.gitRepoDocker.gitProvider}}
      path: {{ .Values.InitResources.gitRepoDocker.path }}
      branches:
        include: {{ .Values.InitResources.gitRepoDocker.branches.include }}
      files:
        include: {{ .Values.InitResources.gitRepoDocker.files.include }}

  - name: {{ .Values.InitResources.gitRepoHelm.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.InitResources.gitRepoHelm.gitProvider }}
      path: {{ .Values.InitResources.gitRepoHelm.path }}
      branches:
        include: {{ .Values.InitResources.gitRepoHelm.branches.include }}
      files:
        include: {{ .Values.InitResources.gitRepoHelm.files.include }}

  - name:  {{ .Values.InitResources.buildInfoContainer.resourceName }}
    type: BuildInfo 
    configuration:
      sourceArtifactory: {{ .Values.Init.artifactoryIntegration }}
      buildName: {{ .Values.InitResources.buildInfoContainer.name }}
      buildNumber: ${run_number} 
      
  - name: {{ .Values.InitResources.buildInfoHelm.resourceName }}
    type: BuildInfo 
    configuration:
      sourceArtifactory: {{ .Values.Init.artifactoryIntegration }}
      buildName: {{ .Values.InitResources.buildInfoHelm.name }}
      buildNumber: ${run_number} 
  
  - name: {{ .Values.InitResources.chart.resourceName }}
    type: HelmChart
    configuration:
      sourceArtifactory: {{ .Values.Init.artifactoryIntegration }}
      repository: {{ .Values.InitResources.chart.repo }}
      chart: {{ .Values.InitResources.chart.name }}
      version: {{ .Values.InitResources.chart.version }}


########## HELM 

  - name: {{ .Values.ChartResources.gitRepo.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.ChartResources.gitRepo.gitProvider }}
      path: {{ .Values.ChartResources.gitRepo.path }}
      branches:
        include: {{ .Values.ChartResources.gitRepo.branches.include }}
      files: 
        include: {{ .Values.ChartResources.gitRepo.files.include }}
      buildOn:
         commit: false

  - name: {{ .Values.ChartResources.gitRepoHelm.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.ChartResources.gitRepoHelm.gitProvider }}
      path: {{ .Values.ChartResources.gitRepoHelm.path }}
      branches:
        include: {{ .Values.ChartResources.gitRepoHelm.branches.include }}
      files: 
        include: {{ .Values.ChartResources.gitRepoHelm.files.include }}
      buildOn:
         commit: false

  - name: {{ .Values.ChartResources.chart.name }}
    type: HelmChart
    configuration:
      sourceArtifactory: {{ .Values.Chart.artifactoryIntegration }}
      repository: {{ .Values.Chart.repo }}
      chart: {{ .Values.Chart.name }}
      version: {{ .Values.Chart.version }}

  - name: {{ .Values.ChartResources.fileSpec.front.name }}
    type: FileSpec
    configuration:
      sourceArtifactory: artifactory_eu
      pattern:  ${runVarFrontManifest}
      target: front/manifest.json
      flat: true

  - name: {{ .Values.ChartResources.fileSpec.back.name }}
    type: FileSpec
    configuration:
      sourceArtifactory: artifactory_eu
      pattern:  ${runVarBackManifest}
      target: back/manifest.json
      flat: true

  - name: {{ .Values.ChartResources.buildInfo.resourceName }}
    type: BuildInfo 
    configuration:
      sourceArtifactory: {{ .Values.Chart.artifactoryIntegration }}
      buildName: {{ .Values.ChartResources.buildInfo.name }}
      buildNumber: ${run_number} 

  - name: {{ .Values.ChartResources.buildInfoPromoted.resourceName }}
    type: BuildInfo 
    configuration:
      sourceArtifactory: {{ .Values.Chart.artifactoryIntegration }}
      buildName: {{ .Values.ChartResources.buildInfo.name }}
      buildNumber: ${run_number} 

########## DISTRIBUTE 

  - name: {{ .Values.ChartResources.releaseBundle.resourceName }} 
    type: ReleaseBundle
    configuration:
      sourceDistribution: {{ .Values.Chart.distributionIntegration }}
      name: {{ .Values.ChartResources.releaseBundle.name }}
      version: "1"          # will be overriden by the CreateReleaseBundle step 
      isSigned: true

  - name: {{ .Values.ChartResources.aqlDistribution.name }}
    type: Aql
    configuration:
      sourceArtifactory: {{ .Values.Chart.artifactoryIntegration }}
      query: > 
        items.find({ 
        "$or": [ 
          {
            "repo": "{{ .Values.Chart.repoPromotion1 }}",
            "@chart.name": "{{ .Values.Chart.name }}" , 
            "@chart.version": "{{ .Values.Chart.version }}" 
          },
          {
            "@validation.chart.name": "{{ .Values.Chart.name }}" , 
            "@validation.chart.version": "{{ .Values.Chart.version }}" 
          }
          }]
      addedProperties:
        distribution: "automatic"
      mappings:
        - name: back
          input: "{{ .Values.BackApp.container.repoPromotion2 }}/(.*)"
          output: "docker-local/$1"
        - name: front
          input: "{{ .Values.BackApp.container.repoPromotion2 }}/(.*)"
          output: "docker-local/$1"
        - name: helm
          input: "{{ .Values.BackApp.container.repoPromotion2 }}/(.*)"
          output: "docker-local/$1"

  - name: {{ .Values.ChartResources.distributionRule.name }} 
    type: DistributionRule
    configuration:
      sourceDistribution: {{ .Values.Chart.distributionIntegration }}
      serviceName: {{ .Values.ChartResources.distributionRule.serviceName }}          
      siteName: {{ .Values.ChartResources.distributionRule.siteName }} 
      cityName: {{ .Values.ChartResources.distributionRule.cityName }} 
      countryCodes:
        - {{ .Values.ChartResources.distributionRule.countryCodes }} 



pipelines:
## INIT PIPELINE
  - name: {{ .Values.Init.pipelineName }}
    steps:
      - name: create_resources
        type: Bash
        configuration:
          affinityGroup: helm
          runtime:
            type: host
          inputResources:
            - name: {{ .Values.InitResources.gitRepo.name }}
          integrations:
            - name: {{ .Values.Init.artifactoryIntegration }}
        execution:
          # onStart:
          #   - sudo mkdir -p /etc/docker 
          #   - > 
          #     sudo jq -n  "{\"insecure-registries\": [\"{{ .Values.Init.container.registry }}\"]}" > /etc/docker/daemon.json
          #   - sudo systemctl restart docker
          #   - sudo cat /etc/docker/daemon.json
          onExecute:
            - cd ${res_{{ .Values.InitResources.gitRepo.name }}_resourcePath}/chart/CI/jfrog
            - ls -l && chmod +x init.sh
            - echo ${res_{{ .Values.InitResources.gitRepo.name }}_branchName}
            - git branch
#            - git checkout ${res_{{ .Values.InitResources.gitRepo.name }}_branchName}
            - git checkout demo
            - git branch
            - ./init.sh -u  ${int_{{ .Values.Init.artifactoryIntegration }}_url%/artifactory} -p ${int_{{ .Values.Init.artifactoryIntegration }}_apikey}
      
      - name: {{ .Values.InitSteps.publishHelm.name }}
        type: HelmPublish
        configuration:
          affinityGroup: helm
          helmVersion: 3
          chartPath: {{ .Values.InitSteps.publishHelm.path }}
          lint: {{ .Values.InitSteps.publishHelm.lint }}
          autoPublishBuildInfo: {{ .Values.InitSteps.publishHelm.autoPublishBuildInfo }}
          inputResources:
            - name: {{ .Values.InitResources.gitRepoHelm.name }}
          inputSteps:
            - name: create_resources
          integrations:
            - name: {{ .Values.Init.artifactoryIntegration }}
          outputResources:
            - name: {{ .Values.InitResources.chart.resourceName }}
            - name: {{ .Values.InitResources.buildInfoContainer.resourceName }}
        execution:
          onStart:
            - curl  https://get.helm.sh/helm-canary-linux-amd64.tar.gz | tar xvz -C /tmp
            - mv /tmp/linux-amd64/helm /usr/local/bin/helm3
            - helm3 version
            - cat ${res_{{ .Values.InitResources.gitRepoHelm.name }}_resourcePath}/chart/CI/jfrog/Dockerfile

      - name: {{ .Values.InitSteps.dockerBuild.name }}
        type: DockerBuild
        configuration:
          affinityGroup: helm
          dockerFileName: {{ .Values.InitSteps.dockerBuild.dockerFileName }}
          dockerFileLocation: {{ .Values.InitSteps.dockerBuild.dockerFileLocation }}
          dockerImageName: "{{ .Values.Init.container.registry }}/{{ .Values.Init.container.image }}"
          dockerImageTag: {{ .Values.Init.container.tag }}
          inputSteps:
            - name: {{ .Values.InitSteps.publishHelm.name }}
          inputResources:
            - name: {{ .Values.InitResources.gitRepoDocker.name }}
          integrations:
            - name: {{ .Values.Init.artifactoryIntegration }}

      - name: {{ .Values.InitSteps.dockerPush.name }}
        type: DockerPush
        configuration:
          affinityGroup: helm
          targetRepository: {{ .Values.Init.container.repoSource }}
          autoPublishBuildInfo:  {{ .Values.InitSteps.dockerPush.autoPublishBuildInfo }}
          forceXrayScan:  {{ .Values.InitSteps.dockerPush.forceXrayScan }}
          inputSteps:
            - name: {{ .Values.InitSteps.dockerBuild.name }}
          integrations:
            - name: {{ .Values.Init.artifactoryIntegration }}
          outputResources:
            - name: {{ .Values.InitResources.buildInfoHelm.resourceName }}

## HELM PIPELINE
  - name: {{ .Values.Chart.pipelineName }}
    steps:
      - name: setup_variables
        type: Bash
        configuration:
          affinityGroup: helm
          runtime:
            type: host
          inputResources:
            - name: {{ .Values.ChartResources.gitRepo.name }}
          integrations:
            - name: {{ .Values.Chart.artifactoryIntegration }}
        execution:
          onExecute:
            - cd ${res_{{ .Values.ChartResources.gitRepo.name }}_resourcePath}/chart/content
            - echo ${res_{{ .Values.ChartResources.gitRepo.name }}_branchName}
            - git branch
            - git checkout ${res_{{ .Values.ChartResources.gitRepo.name }}_branchName}
            - git branch
            # path to manifest.json of each docker images referenced in the values.yaml
            - sudo curl -LO https://github.com/mikefarah/yq/releases/download/v4.4.0/yq_linux_amd64
            - sudo chmod u+x yq_linux_amd64 && sudo mv yq_linux_amd64 /usr/bin/yq && sudo yq --version
            # FRONT 
            - front_repo_path=`yq eval '.images.front.repository' values.yaml  |  sed "s/\([a-z]*-[a-z]*\).*\/\(.*\)/\1\/\2/g"`
            - front_img_name=`yq eval '.images.front.repository' values.yaml  |  sed "s/.*.*\/\(.*\)/\1/g"`
            - echo $front_img_name
            - front_vers=`yq eval '.images.front.tag' values.yaml` && echo $front_vers
            # BACK
            - back_repo_path=`yq eval '.images.back.repository' values.yaml  |  sed "s/\([a-z]*-[a-z]*\).*\/\(.*\)/\1\/\2/g"`
            - back_img_name=`yq eval '.images.back.repository' values.yaml  |  sed "s/.*.*\/\(.*\)/\1/g"`
            - echo $back_img_name
            - back_vers=`yq eval '.images.back.tag' values.yaml` && echo $back_vers
            # for FileSpec resources
            - add_run_variables runVarFrontManifest=${front_repo_path}/${front_vers}/manifest.json
            - add_run_variables runVarBackManifest=${back_repo_path}/${back_vers}/manifest.json
            # for adding properties on the Helm Chart
            - add_run_variables runVarFrontImage=${front_img_name}/${front_vers}
            - add_run_variables runVarBackImage=${back_img_name}/${back_vers}

      - name: {{ .Values.ChartSteps.publishHelm.name }}
        type: HelmPublish
        configuration:
          # environmentVariables:
          #   JFROG_CLI_BUILD_URL: "${int_{{ .Values.Chart.artifactoryIntegration }}_url/%artifactory/ui}/pipelines/myPipelines/{{ .Values.ChartResources.buildInfo.name }}/${run_number}/setup_env?branch=${res_{{ .Values.ChartResources.gitRepoHelm.name }}_branchName"
          affinityGroup: helm
          helmVersion: 3
          chartPath: {{ .Values.ChartSteps.publishHelm.path }}
          lint: {{ .Values.ChartSteps.publishHelm.lint }}
          autoPublishBuildInfo: {{ .Values.ChartSteps.publishHelm.autoPublishBuildInfo }}
          inputResources:
            - name: {{ .Values.ChartResources.gitRepoHelm.name }}            
            - name: {{ .Values.ChartResources.fileSpec.front.name }}
            - name: {{ .Values.ChartResources.fileSpec.back.name }}
          inputSteps:
            - name: setup_variables
          integrations:
            - name: {{ .Values.Chart.artifactoryIntegration }}
          outputResources:
            - name: {{ .Values.ChartResources.chart.name }}
            - name: {{ .Values.ChartResources.buildInfo.resourceName }}
        execution:
          onStart:
            - echo ${runVarFrontManifest}
            - echo ${runVarBackManifest}
            - curl  https://get.helm.sh/helm-canary-linux-amd64.tar.gz | tar xvz -C /tmp
            - mv /tmp/linux-amd64/helm /usr/local/bin/helm3
            - helm3 version
            - cat ${res_{{ .Values.ChartResources.gitRepoHelm.name }}_resourcePath}/chart/CI/jfrog/Dockerfile
            - export JFROG_CLI_BUILD_URL="${int_{{ .Values.Chart.artifactoryIntegration }}_url/%artifactory/ui}/pipelines/myPipelines/{{ .Values.ChartResources.buildInfo.name }}/${run_number}/setup_env?branch=${res_{{ .Values.ChartResources.gitRepoHelm.name }}_branchName}"
 ############################################################################################
            # HACK : bumping version in the Chart.yaml (should be done when pushing the code)
  ###########################################################################################
            - sudo curl -LO https://github.com/mikefarah/yq/releases/download/v4.4.0/yq_linux_amd64
            - sudo chmod u+x yq_linux_amd64 && sudo mv yq_linux_amd64 /usr/bin/yq && sudo yq --version
            - yq eval '.version = "{{ .Values.Chart.version }}"' -i ${res_{{ .Values.ChartResources.gitRepoHelm.name }}_resourcePath}/chart/content/Chart.yaml

      - name: {{ .Values.ChartSteps.helmDeploy.name }}
        type: HelmDeploy
        configuration:
          environmentVariables:
            JFROG_CLI_LOG_LEVEL: DEBUG
          helmVersion: 3
          # WORKAROUND TO MAKE HELM 3 WORK : SHOULD BE REMOVED IN THE LATEST VERSIONS
          runtime:
            type: image
            image:
              custom:
                registry: {{ .Values.Chart.artifactoryIntegration }}
                name: "{{ .Values.Chart.container.registry }}/{{ .Values.Chart.container.image }}"
                tag: {{ .Values.Chart.container.tag }}
                sourceRepository: {{ .Values.Chart.container.repoSource }}
          integrations:
            - name: {{ .Values.Chart.k8sIntegration }}
          inputResources:
            - name: {{ .Values.ChartResources.chart.name }}
          releaseName: my-super-app
          flags: "--debug --install --namespace {{ .Values.Chart.k8sNamespace }} --cleanup-on-fail "
          valueFilePaths:
            - values.yaml

      - name: {{ .Values.ChartSteps.testing.name }}
        type: Bash
        configuration:
          inputSteps:
            - name: {{ .Values.ChartSteps.helmDeploy.name }}
        execution:
          onExecute:
            - echo running tests !!!
          onSuccess:
            - echo tests OK !!!
          onFailure:
            - echo tests KO !!!
          onComplete:
            - echo stop deployment

      - name: {{ .Values.ChartSteps.promotion.name }}
        type: PromoteBuild
        configuration:
          targetRepository: {{ .Values.Chart.repoPromotion1 }}
          includeDependencies: {{ .Values.ChartSteps.promotion.includeDependencies }}
          status: {{ .Values.ChartSteps.promotion.status }}
          comment: {{ .Values.ChartSteps.promotion.comment }}
          copy: {{ .Values.ChartSteps.promotion.copy }}
          inputResources:
            - name: {{ .Values.ChartResources.buildInfo.resourceName }}
              trigger: true
          inputSteps:
            - name: {{ .Values.ChartSteps.testing.name }}
          outputResources:
            - name: {{ .Values.ChartResources.buildInfoPromoted.resourceName }}
            - name: {{ .Values.ChartResources.aqlDistribution.name }}
        execution:
          onSuccess:
#            - echo  "jfrog rt sp --build={{ .Values.ChartResources.buildInfo.name }}/${run_number} {{ .Values.Chart.repoPromotion1 }}/{{ .Values.Chart.name }}-{{ .Values.Chart.version }}.tgz \"image.back=${runVarBackImage};image.front=${runVarFrontImage}\""
#            - jfrog rt sp --build={{ .Values.ChartResources.buildInfo.name }}/${run_number} {{ .Values.Chart.repoPromotion1 }}/{{ .Values.Chart.name }}-{{ .Values.Chart.version }}.tgz "image.back=${runVarBackImage};image.front=${runVarFrontImage}"
          # WORKAROUND FOR BUG 
            - jfrog rt sp --build=${pipeline_name}/${run_number} {{ .Values.Chart.repoPromotion1 }}/{{ .Values.Chart.name }}-{{ .Values.Chart.version }}.tgz "image.back=${runVarBackImage};image.front=${runVarFrontImage}"
            - jfrog rt sp ${runVarFrontManifest} "validation.chart.version={{ .Values.Chart.version }}" 
            - jfrog rt sp ${runVarBackManifest} "validation.chart.version={{ .Values.Chart.version }}" 

      - name: {{ .Values.ChartSteps.initRB.name }}
        type: CreateReleaseBundle 
        configuration:
          releaseBundleName: {{ .Values.ChartResources.releaseBundle.name }} 
          releaseBundleVersion: ${runVarImageTag} 
          dryRun: false
          sign: true 
          description: automatic creation 
          releaseNotes:
            syntax: markdown
            content: |
              # Description 
              super release 
              * Feature 1 
              * Bigfix 1
          inputResources:
            - name: {{ .Values.ChartResources.aqlDistribution.name }}
          outputResources:
            - name: {{ .Values.ChartResources.releaseBundle.resourceName }}

      - name: {{ .Values.ChartSteps.distributeRB.name }}
        type: DistributeReleaseBundle
        configuration:
          dryRun: true 
          inputResources:
            - name: {{ .Values.ChartResources.distributionRule.resourceName }}
              trigger: true   
            - name: {{ .Values.ChartResources.releaseBundle.resourceName }} 
              trigger: true  
