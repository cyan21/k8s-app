pipelines:
  - name: back_app_gradle_pipeline
    configuration:
      environmentVariables:
        readOnly:
          art_url: "http://artifactory-eu.soleng-emea-staging.jfrog.team/artifactory"
    steps:
      - name: build_app_gradle_backend
        type: GradleBuild
        configuration: 
          runtime:
            type: image
            image:
              custom:
                name: drydock/u18java
                tag: master
          gradleCommand:  clean artifactoryPublish -b build.gradle
          sourceLocation:       back/src  #required
          configFileLocation:   .  #required
          configFileName:       gradle-art-config  #required
          forceXrayScan:        false #optional
          autoPublishBuildInfo: false #optional
          inputResources:
            - name: src_code_back_app
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo  "Preparing for work..."
          onSuccess:
            - echo ${res_src_code_back_app_isGitTag}
            - appVersion=`if [[ ${res_src_code_back_app_isGitTag} == "True" ]]; then echo ${res_src_code_back_app_gitTagName}; else echo ${res_src_code_back_app_commitSha}; fi`
            - echo $appVersion
            - add_pipeline_variables appVersion="${appVersion}"
            - add_pipeline_variables subPath="${res_src_code_back_app_branchName}/${appVersion}"      
          onFailure:
            - echo "You Lose"
          onComplete: #always
            - echo "Leave it as you found it. Let's clean it"

      - name: publish_backend_buildinfo
        type: PublishBuildInfo
        configuration:
          inputSteps:
            - name: build_app_gradle_backend
          outputResources:
            - name: back_appBuildInfo
        execution:
          onStart:
            - echo "Preparing for Xray scan..."
          onSuccess:
            - echo build name / build number ${res_back_appBuildInfo_buildName} ${res_back_appBuildInfo_buildNumber}
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete: #always
            - echo "Cleaning up some stuff"

      - name: promote_build_info_gradle_back_app
        type: PromoteBuild
        configuration:
          targetRepository: app-gradle-rc-local
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputResources:
            - name: back_appBuildInfo
              trigger: true
          outputResources:
            - name: build_info_back_app_promoted
        execution:  
          onStart:
            - echo ${res_back_appBuildInfo_buildName} 
            - echo ${res_back_appBuildInfo_buildNumber} 
          onSuccess:
            - jfrog rt sp --build=${res_back_appBuildInfo_buildName}/${res_back_appBuildInfo_buildNumber} app-gradle-rc-local/ "app.version=${appVersion}"
            - write_output build_info_back_app_promoted myversion=${appVersion}


  - name: backapp_docker_pipeline
    steps:
      - name: build_docker_backapp
        type: DockerBuild
        configuration:
          affinityGroup: swampup
          dockerFileName: jfrog-Dockerfile
          dockerFileLocation: back/CI/Docker/
          dockerImageName: docker.artifactory-eu.soleng-emea-staging.jfrog.team/backapp
          dockerImageTag: '${res_build_info_back_app_promoted_myversion}-${res_src_dockerfile_back_app_commitSha}'
          inputResources:
            - name: src_dockerfile_back_app
            - name: build_info_back_app_promoted
            - name: back_app_exec
          integrations:
            - name: artifactory_eu
            - name: hza_github
        execution:
          onStart:
            - echo ${res_build_info_back_app_promoted_myversion}
            - add_pipeline_variables appVersion="${res_build_info_back_app_promoted_myversion}"
            - echo $triggerBuildInfoName
            - echo $triggerBuildInfoNumber
            - add_pipeline_variables triggerBuildInfoName="${res_build_info_back_app_promoted_buildName}"
            - add_pipeline_variables triggerBuildInfoNumber="${res_build_info_back_app_promoted_buildNumber}"
            - echo $triggerBuildInfoName
            - echo $triggerBuildInfoNumber
            #- echo "items.find({\"@build.name\":\"${triggerBuildInfoName}\",\"@build.number\":\"${triggerBuildInfoNumber}\"}).include(\"@app.version\")" > aql.json
            #- cat aql.json
            #- jfrog rt curl -XPOST api/search/aql -T aql.json
            #- appVersion=`jfrog rt curl -XPOST api/search/aql -T aql.json | jq --raw-output .results[].properties[].value`
            #- echo $appVersion
            #- add_pipeline_variables appVersion="${appVersion}" 
            - echo ${appVersion}
            - echo $triggerBuildInfoName
            - echo ${triggerBuildInfoNumber}
            #####################################
            - echo ${res_back_app_exec_resourcePath}
            - echo "Gradle App Build number :" 
            - echo ${triggerBuildInfoNumber}
            - echo "Webservice App version :" 
            - echo ${appVersion} 
            - echo "Git repo hash :" 
            - echo ${res_src_dockerfile_back_app_commitSha}
            - echo "Copying exec binary to specific location..." && ls -l
            - echo "Filespec location :" && echo ${res_back_app_exec_resourcePath} && ls -l ${res_back_app_exec_resourcePath}
            #- cp ${res_back_app_exec_resourcePath}/back* ${res_src_dockerfile_back_app_resourcePath}/back/CI/Docker/
            #- cd ${res_src_dockerfile_back_app_resourcePath}/back/CI/Docker/
            #- tar xvf back*.tgz
            #- ls -l ${res_src_dockerfile_back_app_resourcePath}/back/CI/Docker
            - echo $appVersion
            - add_pipeline_variables myDockerTag="${appVersion}-${res_src_dockerfile_back_app_commitSha}"
          onSuccess:
            - echo "Job well done!"

      - name: publish_docker_backapp
        type: DockerPush
        configuration:
          affinityGroup: swampup
          targetRepository: docker
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_docker_backapp
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: build_info_docker_backapp
        execution:
          onSuccess:
            - echo "Job well done!"
            - echo $appVersion

      - name: scan_docker_build_info_backapp
        type: XrayScan
        configuration:
          #affinityGroup: swampup
          failOnScan: false
          inputResources:
            - name: build_info_docker_backapp
              trigger: true
          outputResources:
            - name: build_info_docker_backapp_scanned

      - name: promoting_docker_build_info_backapp
        type: PromoteBuild
        configuration:
          #affinityGroup: swampup
          targetRepository: app-docker-sit-local
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: build_info_docker_backapp_scanned
              trigger: true
          outputResources:
            - name: build_info_docker_backapp_promoted_hza
        execution:
          onStart:
            - echo ${res_build_info_docker_backapp_scanned_buildName}
            - echo ${res_build_info_docker_backapp_scanned_buildNumber}
            - jfrog rt cp --build=${res_build_info_docker_backapp_scanned_buildName}/${res_build_info_docker_backapp_scanned_buildNumber} docker-dev-local/ docker-release-local/
          onSuccess:
            - jfrog rt sp --build=${res_build_info_docker_backapp_scanned_buildName}/${res_build_info_docker_backapp_scanned_buildNumber} docker-release-local/**/manifest.json "docker.tag=${myDockerTag}"
            - write_output build_info_docker_backapp_promoted_hza backregistry=docker.artifactory-eu.soleng-emea-staging.jfrog.team
            - write_output build_info_docker_backapp_promoted_hza backimage=backapp
            - write_output build_info_docker_backapp_promoted_hza backtag=${myDockerTag}