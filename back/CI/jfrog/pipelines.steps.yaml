pipelines:
  - name: backapp_go_pipeline
    configuration:
      runtime:
        type: image
        image:
          auto:
            language: go
            versions:
              - "1.13.7"
    steps:
      # Build the Go app from the GitRepo
      - name: build_go_backapp
        type: GoBuild
        configuration:
          sourceLocation: back/
          repository: app-go
          outputLocation: /tmp/dist
          outputFile: backend
          inputResources:
            - name: src_code_backapp
          environmentVariables:
            OFFLINE_MODE: 'true'
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - echo "Unit Testing ..." 
          onSuccess:
            - echo "Renaming with version" 
            - env

      # Publish the Go app (binary) and Go Build Info to Artifactory 
      - name: publish_go_backapp
        type: GoPublishBinary
        configuration:
          autoPublishBuildInfo: true
          targetRepository: app-generic-dev-local
          inputSteps:
            - name: build_go_backapp
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: build_info_backapp

      # Scan Build Info
      - name: scan_go_backapp
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: build_info_backapp
              trigger: true
          outputResources:
            - name: build_info_backapp_scanned

      # Promote Go Build Info
      - name: promote_build_info_go_backapp
        type: PromoteBuild
        configuration:
          targetRepository: app-generic-rc-local
          includeDependencies: false
          status: "SANDBOX_OK"
          comment: "Unit testing and Xray scan passed succesfully"
          copy: false
          inputResources:
            - name: build_info_backapp_scanned
              trigger: true
          outputResources:
            - name: build_info_backapp_promoted
  
  - name: backapp_docker_pipeline
    steps:
      - name: build_docker_backapp
        type: DockerBuild
        configuration:
          dockerFileName: jfrog-Dockerfile
          dockerFileLocation: back/CI/Docker/
          dockerImageName: 'yannaws-app-docker.jfrog.io/backapp'
          dockerImageTag: ${run_number}
          inputResources:
            - name: src_dockerfile_backapp
            - name: build_info_backapp_promoted
            - name: backapp_exec
          integrations:
            - name: artifactory_eu
            - name: yann_github
        execution:
          onStart:
            - echo "Copying exec binary to specific location..."
#            - pwd && ls -l && ls -l ${res_src_dockerfile_backapp_resourcePath}
#            - ls ${res_backapp_exec_resourcePath} 
            - cp ${res_backapp_exec_resourcePath}/backend ${res_src_dockerfile_backapp_resourcePath}/back/CI/Docker/
            - cd ${res_src_dockerfile_backapp_resourcePath}/back/CI/Docker/ && curl -O "https://${int_yann_github_token}@raw.githubusercontent.com/cyan21/k8s-app/master/back/data.json"
            - ls -l ${res_src_dockerfile_backapp_resourcePath}/back/CI/Docker
          onSuccess:
            - echo "Job well done!"
      - name: publish_docker_backapp
        type: DockerPush
        configuration:
          targetRepository: app-docker
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_docker_backapp
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: build_info_docker_backapp
      - name: scan_docker_build_info_backapp
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: build_info_docker_backapp
              trigger: true
          outputResources:
            - name: build_info_docker_backapp_scanned
      - name: promote_docker_build_info_backapp
        type: PromoteBuild
        configuration:
          targetRepository: app-docker-sit-local
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          inputResources:
            - name: build_info_docker_backapp_scanned
              trigger: true
          outputResources:
            - name: build_info_docker_backapp_promoted

  # - name: app_deploy_pipeline
  #   steps:
  #     - name: deploy_helm_chart
  #       type: HelmDeploy
  #       configuration:
  #         valueFilePaths:                       # optional
  #           - <path and filename>
  #         releaseName: yann-app
  #         dryRun: true
  #         lint: false
  #         lintFlags: "--strict"
  #         test: false
  #         testFlags: "--parallel"
  #         integrations:
  #           - name: hza_k8s
  #         inputResources:
  #           - name: app_helm_chart