pipelines:
  - name: k8s_backapp_gradle
    configuration:
      environmentVariables:
        readOnly:
          myDemoVersion:  2.0.0
          grdlPromoteRepo: kaizoku-rc-grdl-local
    steps:
      - name: build_k8s_backapp_gradle
        type: GradleBuild
        configuration: 
          runtime:
            type: image
            image:
              custom:
                name: drydock/u18java
                tag: master
          gradleCommand:  clean artifactoryPublish -b build.gradle
          sourceLocation:       back/src  #required
          configFileLocation:   .  #required
          configFileName:       gradle-art-config  #required
          forceXrayScan:        false #optional
          autoPublishBuildInfo: true #optional
          inputResources:
            - name: src_code_k8s_backapp_gradle
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_backapp
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/k8s_backapp_gradle/${run_number}/setup_env?branch=${res_src_code_k8s_backapp_gradle_branchName}"
          onSuccess:
            - echo ${res_src_code_k8s_backapp_gradle_isGitTag}
            - appVersion=`if [[ ${res_src_code_k8s_backapp_gradle_isGitTag} == "True" ]]; then echo ${res_src_code_k8s_backapp_gradle_gitTagName}; else echo ${res_src_code_k8s_backapp_gradle_commitSha}; fi`
            - echo $appVersion
            - add_run_variables appVersion="${appVersion}"
#            - add_run_variables subPath="${res_src_code_k8s_backapp_gradle_branchName}/${appVersion}"      

      - name: scan_bi_k8s_backapp_gradle
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_backapp
              trigger: true

      - name: promote_bi_k8s_backapp_gradle
        type: PromoteBuild
        configuration:
          targetRepository: ${grdlPromoteRepo}
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: true
          inputResources:
            - name: bi_k8s_backapp
              trigger: true
          inputSteps:
            - name: scan_bi_k8s_backapp_gradle
          outputResources:
            - name: bi_k8s_backapp_gradle_promoted_staging
        execution:  
          onStart:
            - echo ${res_bi_k8s_backapp_buildName} 
            - echo ${res_bi_k8s_backapp_buildNumber} 
          onSuccess:
            - jfrog rt sp --build=${res_bi_k8s_backapp_buildName}/${res_bi_k8s_backapp_buildNumber} ${grdlPromoteRepo}/ "app.version=${appVersion}"
 #           - write_output pb_k8s_backapp_gradle dockerAppTag=${myDockerTag}
            - write_output pb_k8s_backapp_gradle biNumber=${res_bi_k8s_backapp_buildNumber}


  # - name: suv_003_backapp_docker_pipeline
  #   steps:
  #     - name: build_docker_backapp
  #       type: DockerBuild
  #       configuration:
  #         affinityGroup: swampup
  #         dockerFileName: jfrog-Dockerfile
  #         dockerFileLocation: back/CI/Docker/
  #         dockerImageName: '${ArtIP}/app-docker-virtual/backapp'
  #         dockerImageTag: '${res_build_info_back_app_promoted_staging_myversion}-${res_src_dockerfile_back_app_commitSha}'
  #         inputResources:
  #           - name: src_dockerfile_back_app
  #           - name: build_info_back_app_promoted_staging
  #           - name: docker_Framework_BuildInfo_Promoted
  #           - name: back_app_exec
  #         integrations:
  #           - name: artifactory
  #           - name: app_docker_registry
  #       execution:
  #         onStart:
  #           - 'export ArtIP=$(echo ${int_artifactory_url}|awk -F ''/'' ''{print $3}'')'
  #           - echo ${res_build_info_back_app_promoted_staging_myversion}
  #           - add_pipeline_variables appVersion="${res_build_info_back_app_promoted_staging_myversion}"
  #           - echo $triggerBuildInfoName
  #           - echo $triggerBuildInfoNumber
  #           - add_pipeline_variables triggerBuildInfoName="${res_build_info_back_app_promoted_staging_buildName}"
  #           - add_pipeline_variables triggerBuildInfoNumber="${res_build_info_back_app_promoted_staging_buildNumber}"
  #           - echo $triggerBuildInfoName
  #           - echo $triggerBuildInfoNumber
  #           #- echo "items.find({\"@build.name\":\"${triggerBuildInfoName}\",\"@build.number\":\"${triggerBuildInfoNumber}\"}).include(\"@app.version\")" > aql.json
  #           #- cat aql.json
  #           #- jfrog rt curl -XPOST api/search/aql -T aql.json
  #           #- appVersion=`jfrog rt curl -XPOST api/search/aql -T aql.json | jq --raw-output .results[].properties[].value`
  #           #- echo $appVersion
  #           #- add_pipeline_variables appVersion="${appVersion}" 
  #           - echo ${appVersion}
  #           - echo $triggerBuildInfoName
  #           - echo ${triggerBuildInfoNumber}
  #           #####################################
  #           - echo ${res_back_app_exec_resourcePath}
  #           - echo "Gradle App Build number :" 
  #           - echo ${triggerBuildInfoNumber}
  #           - echo "Webservice App version :" 
  #           - echo ${appVersion} 
  #           - echo "Git repo hash :" 
  #           - echo ${res_src_dockerfile_back_app_commitSha}
  #           - echo "Copying exec binary to specific location..." && ls -l
  #           - echo "Filespec location :" && echo ${res_back_app_exec_resourcePath} && ls -l ${res_back_app_exec_resourcePath}
  #           #- cp ${res_back_app_exec_resourcePath}/back* ${res_src_dockerfile_back_app_resourcePath}/back/CI/Docker/
  #           #- cd ${res_src_dockerfile_back_app_resourcePath}/back/CI/Docker/
  #           #- tar xvf back*.tgz
  #           #- ls -l ${res_src_dockerfile_back_app_resourcePath}/back/CI/Docker
  #           - echo $appVersion
  #           - sed -i "s/registry/${ArtIP}/g" ${res_src_dockerfile_back_app_resourcePath}/back/CI/Docker/jfrog-Dockerfile
  #           - add_pipeline_variables myDockerTag="${appVersion}-${res_src_dockerfile_back_app_commitSha}"
  #         onSuccess:
  #           - echo "Job well done!"

  #     - name: publish_docker_backapp
  #       type: DockerPush
  #       configuration:
  #         affinityGroup: swampup
  #         targetRepository: app-docker-virtual
  #         autoPublishBuildInfo: true
  #         inputSteps:
  #           - name: build_docker_backapp
  #         integrations:
  #           - name: artifactory
  #         outputResources:
  #           - name: build_info_docker_backapp
  #       execution:
  #         onStart: 
  #           - jfrog rt dl app-gradle-rc-local/org/jfrog/example/gradle/webservice/1.1.2/webservice-1.1.2.war --build-name="suv_003_backapp_docker_pipeline" --build-number=${run_number}
  #         onSuccess:
  #           - echo "Job well done!"
  #           - echo $appVersion

  #     - name: xray_scan_docker_build_info_backapp
  #       type: Bash
  #       configuration:
  #         integrations:
  #           - name: artifactory
  #         affinityGroup: swampup
  #         inputResources:
  #           - name: build_info_docker_backapp
  #       execution:
  #         onStart:
  #           - echo ${res_build_info_docker_backapp_buildName}
  #           - echo ${res_build_info_docker_backapp_buildNumber}
  #           - jfrog rt bs ${res_build_info_docker_backapp_buildName} ${res_build_info_docker_backapp_buildNumber} --fail=false

  #     - name: promoting_docker_build_info_backapp
  #       type: PromoteBuild
  #       configuration:
  #         affinityGroup: swampup
  #         targetRepository: app-docker-rc-local
  #         includeDependencies: false
  #         status: "DOCKER_SCAN_OK"
  #         comment: "Xray scan passed succesfully"
  #         copy: "True"
  #         integrations:
  #           - name: artifactory
  #         inputResources:
  #           - name: build_info_docker_backapp
  #             trigger: true
  #         inputSteps:
  #           - name: xray_scan_docker_build_info_backapp
  #         outputResources:
  #           - name: build_info_docker_backapp_promoted_staging
  #       execution:
  #         onStart:
  #           - 'export ArtIP=$(echo ${int_artifactory_url}|awk -F ''/'' ''{print $3}'')'
  #           - echo ${res_build_info_docker_backapp_buildName}
  #           - echo ${res_build_info_docker_backapp_buildNumber}
  #           - jfrog rt cp --build=${res_build_info_docker_backapp_buildName}/${res_build_info_docker_backapp_buildNumber} app-docker-dev-local/ app-docker-rc-local/
  #         onSuccess:
  #           - jfrog rt sp --build=${res_build_info_docker_backapp_buildName}/${res_build_info_docker_backapp_buildNumber} app-docker-rc-local/**/manifest.json "docker.tag=${myDockerTag}"
  #           - write_output build_info_docker_backapp_promoted_staging "backregistry=\"${ArtIP}/app-docker-virtual\""
  #           - write_output build_info_docker_backapp_promoted_staging "backimage=\"backapp\""
  #           - write_output build_info_docker_backapp_promoted_staging "backtag=${myDockerTag}"