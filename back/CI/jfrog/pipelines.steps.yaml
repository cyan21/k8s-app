pipelines:
  - name: k8s_backapp_gradle
    configuration:
      environmentVariables:
        readOnly:
          envVarGrdlRepo: kaizoku-grdl
          envVarGrdlPromoteRepo: kaizoku-rc-grdl-local
    steps:
      - name: build_k8s_backapp_gradle
        type: GradleBuild
        configuration: 
          runtime:
            type: image
            image:
              custom:
                name: drydock/u18java
                tag: master
          gradleCommand:  clean artifactoryPublish -b build.gradle
          sourceLocation:       back/src  #required
          configFileLocation:   .  #required
          configFileName:       gradle-art-config  #required
          forceXrayScan:        false #optional
          autoPublishBuildInfo: true #optional
          inputResources:
            - name: src_code_k8s_backapp_gradle
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_backapp_gradle
        execution:
          onStart:
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/k8s_backapp_gradle/${run_number}/setup_env?branch=${res_src_code_k8s_backapp_gradle_branchName}"
            - cd ${res_src_code_k8s_backapp_gradle_resourcePath}/back/CI/jfrog
            - ls -l && chmod +x init.sh
            - ./init.sh -u  ${int_artifactory_eu_url/%artifactory/} -p ${int_artifactory_eu_apikey} 
          onSuccess:
            - add_run_variables runVarAppVersion=`sed -n "s/currentVersion=\(.*\)/\1/p" ${res_src_code_backapp_gradle_resourcePath}/back/src/gradle.properties`
            - add_run_variables runVarGitCommit=${res_src_code_k8s_backapp_gradle_commitSha}
            - echo $runVarAppVersion
            - echo $runVarGitCommit
            - jfrog rt sp --build=${res_bi_backapp_gradle_buildName}/${res_bi_backapp_gradle_buildNumber} ${envVarGrdlRepo}/ "src.commit.sha=${runVarGitCommit};app.version=${runVarAppVersion};app.name=kaizoku"
                
      - name: scan_bi_k8s_backapp_gradle
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_backapp_gradle
              trigger: true

      - name: promote_bi_k8s_backapp_gradle
        type: PromoteBuild
        configuration:
          targetRepository: ${envVarGrdlPromoteRepo}
          includeDependencies: false
          status: SANDBOX_OK
          comment: Unit testing and Xray scan passed succesfully
          copy: false
          inputResources:
            - name: bi_k8s_backapp_gradle
              trigger: true
          inputSteps:
            - name: scan_bi_k8s_backapp_gradle
          outputResources:
            - name: bi_k8s_backapp_gradle_promoted_staging
            - name: pb_k8s_backapp_gradle
        execution:  
          onStart:
            - echo ${res_bi_k8s_backapp_gradle_buildName} 
            - echo ${res_bi_k8s_backapp_gradle_buildNumber} 
          onSuccess:
            - write_output pb_backapp_gradle appVersion=${runVarAppVersion}
            - write_output pb_backapp_gradle appCommitSHA=${runVarGitCommit}

  - name: k8s_backapp_gradle_docker
    configuration:
      environmentVariables:
        readOnly:
          envVarDockerPushRepo: kaizoku-docker
          envVarDockerRepoUrl: kaizoku-docker.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
          envVarDockerImageName: ${envVarDockerRepoUrl}/backapp-gradle
          envVarDockerPromoteRepo: kaizoku-rc-docker-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: together
          runtime:
            type: host
          inputResources:
            - name: pb_k8s_backapp_gradle
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${envVarDockerRepoUrl}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - add_run_variables runVarAppVersion=${res_pb_k8s_backapp_gradle_appVersion}
            - add_run_variables runVarAppCommitSHA=${res_pb_k8s_backapp_gradle_appCommitSHA}

      - name: build_k8s_backapp_gradle_docker
        type: DockerBuild
        configuration:
          affinityGroup: together
          dockerFileName: jfrog-Dockerfile
          dockerFileLocation: back/CI/Docker/
          dockerImageName: ${envVarDockerImageName}
          dockerImageTag: ${runVarAppVersion}
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_dockerfile_k8s_backapp_gradle
            - name: backapp_gradle_exec
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            - ls -la ${res_backapp_gradle_exec_resourcePath}
            - cp ${res_backapp_gradle_exec_resourcePath}/*.war ${res_src_dockerfile_k8s_backapp_gradle_resourcePath}/back/CI/Docker/
            - ls -la ${res_src_dockerfile_k8s_backapp_gradle_resourcePath}/back/CI/Docker/
            - add_run_variables runVarGitCommit=${res_src_dockerfile_k8s_backapp_gradle_commitSha}

      - name: publish_k8s_backapp_gradle_docker
        type: DockerPush
        configuration:
          affinityGroup: together
          targetRepository: ${envVarDockerPushRepo}
          autoPublishBuildInfo: true
          inputSteps:
            - name: build_k8s_backapp_gradle_docker
          integrations:
            - name: artifactory_eu
          outputResources:
            - name: bi_k8s_backapp_gradle_docker
        execution:
          onSuccess:
            - echo "${envVarDockerPushRepo}/backapp-gradle/${runVarAppVersion}/manifest.json"
            - jfrog rt sp --build=${res_bi_backapp_gradle_docker_buildName}/${res_bi_backapp_gradle_docker_buildNumber} ${envVarDockerPushRepo}/backapp-gradle/${runVarAppVersion}/manifest.json "app.version=${runVarAppVersion};app.commit.sha=${runVarAppCommitSHA};dockerfile.commit.sha=${runVarGitCommit}"

      - name: scan_k8s_backapp_gradle_docker
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_k8s_backapp_gradle_docker
              trigger: true

      - name: promote_bi_k8s_backapp_gradle_docker
        type: PromoteBuild
        configuration:
          targetRepository: ${envVarDockerPromoteRepo}
          includeDependencies: false
          status: "DOCKER_SCAN_OK"
          comment: "Xray scan passed succesfully"
          copy: false
          integrations:
            - name: artifactory_eu
          inputResources:
            - name: bi_k8s_backapp_gradle_docker
              trigger: true
          inputSteps:
            - name: scan_k8s_backapp_gradle_docker
          outputResources:
            - name: bi_k8s_backapp_gradle_docker_promoted_staging
            - name: pb_k8s_backapp_gradle_docker
        execution:
          onSuccess:
            - write_output pb_k8s_backapp_gradle_docker newTag=${runVarAppVersion}

  - name: k8s_backapp_gradle_deployment
    configuration:
      environmentVariables:
        readOnly:
          envVarDockerRegistry: kaizoku-docker.artifactory-eu-yannc4-0.soleng-emea-staging.jfrog.team:80
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: deploy
          runtime:
            type: host
          inputResources:
            - name: pb_k8s_backapp_gradle_docker
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${envVarDockerRegistry}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - sudo systemctl status docker
            - echo ${res_pb_k8s_backapp_gradle_docker_newTag}
            - add_run_variables runVarNewTag=${res_pb_k8s_backapp_gradle_docker_newTag}

      - name: deploy_helm_chart
        type: HelmDeploy
        configuration:
          affinityGroup: deploy
          helmVersion: 3
          runtime:
            type: image
            image:
              custom:
                registry: artifactory_eu
                name: ${envVarDockerRegistry}/jfrog/pipelines-u18node
                tag: 10.21.0
                sourceRepository: ${envVarDockerRegistry}
          inputSteps:
            - name: setup_env
          integrations:
            - name: yann_k8s
          inputResources:
            - name: hc_my_app_backapp_gradle
          releaseName: helmreporesource
          flags: "--debug --install --namespace ninjavengers --cleanup-on-fail --set images.back.tag=${runVarNewTag}"
          valueFilePaths:
            - values.yaml
        execution:
          onStart:
            - echo ${runVarNewTag}
            #- helm version